# This project is designed to be built outside the source tree.
# File generated by Simon K. Warfield simon.warfield@childrens.harvard.edu
# with support from NIH grant RR021885.

project( gifticlib )
cmake_minimum_required( VERSION 3.0 )

# install destinations
SET(GIFTI_INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin")
SET(GIFTI_INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
SET(GIFTI_INSTALL_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include/gifti")

set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib )



find_package( EXPAT REQUIRED )
find_package( ZLIB REQUIRED )

find_library( NIFTI_LIBRARY
	NAMES niftiio znz
	HINTS "${CMAKE_SOURCE_DIR}/lib" /usr/local/nifti/lib )
	
set( NIFTI_LIBRARIES ${NIFTI_LIBRARY} znz m )
find_path(NIFTI_INCLUDE_DIR nifti1.h "${CMAKE_SOURCE_DIR}/lib/nifti/include"
  			      	       /usr/local/nifti/include/nifti
				       /usr/include/nifti )

message("NIfTI Libraries: ${NIFTI_LIBRARIES}")


GET_FILENAME_COMPONENT(GIFTI_LINK_DIRECTORIES ${NIFTI_LIBRARY} PATH)
LINK_DIRECTORIES(${GIFTI_LINK_DIRECTORIES})
INCLUDE_DIRECTORIES(${NIFTI_INCLUDE_DIR})
# message( "NIFTI_INCLUDE_DIR: ${NIFTI_INCLUDE_DIR}" )


# shared library API versioning -- NOT the same as the release version
SET(GIFTI_SHAREDLIB_VERSION "0.0.0")
STRING( REGEX MATCH "^[0-9]+" GIFTI_SHAREDLIB_SOVERSION ${GIFTI_SHAREDLIB_VERSION})
SET(GIFTI_LIBRARY_PROPERTIES VERSION ${GIFTI_SHAREDLIB_VERSION} SOVERSION ${GIFTI_SHAREDLIB_SOVERSION})

IF(ZLIB_FOUND)
  ADD_DEFINITIONS(-DHAVE_ZLIB)
ENDIF(ZLIB_FOUND)

# INCLUDE_DIRECTORIES(
# ${CRKIT_SOURCE_DIR}/External
# ${gifticlib_SOURCE_DIR}
# ${gifticlib_BINARY_DIR}
# )

# include_directories( ${gifticlib_SOURCE_DIR} )
# link_directories( ${gifticlib_SOURCE_DIR} )



set( GIFTIIO_SRC "${CMAKE_CURRENT_SOURCE_DIR}/gifti_io.c"
     "${CMAKE_CURRENT_SOURCE_DIR}/gifti_xml.c" )

# shared version
# add_library( giftiio SHARED ${GIFTIIO_SRC} )

# static version
add_library( giftiio_static STATIC ${GIFTIIO_SRC} )

add_executable( gifti_tool gifti_tool.c )
add_executable( gifti_test gifti_test.c )



# Set library version when building shared libs.
# SET_TARGET_PROPERTIES(giftiio PROPERTIES ${GIFTI_LIBRARY_PROPERTIES})

#The library target "via_static" has a default OUTPUT_NAME of "via_static", can be changed with
SET_TARGET_PROPERTIES(giftiio_static PROPERTIES ${GIFTI_LIBRARY_PROPERTIES} OUTPUT_NAME "giftiio")

# LINK_DIRECTORIES(${gifticlib_BINARY_DIR})

link_directories( ${gifticlib_BINARY_DIR} )




# AW Edit:
# target_link_libraries( giftiio PUBLIC EXPAT::EXPAT niftiio znz )

target_link_libraries( giftiio_static PUBLIC EXPAT::EXPAT niftiio znz )

target_link_libraries( gifti_tool giftiio_static EXPAT::EXPAT niftiio
		       znz )

target_link_libraries( gifti_test giftiio_static EXPAT::EXPAT niftiio
		       znz )



target_include_directories( giftiio_static PUBLIC
			    "${gifticlib_SOURCE_DIR}/include"
			    ${NIFTI_INCLUDE_DIR} )

target_include_directories( gifti_tool PRIVATE
			    "${gifticlib_SOURCE_DIR}/include" )
target_include_directories( gifti_test PRIVATE
			    "${gifticlib_SOURCE_DIR}" )


add_library( NIFTI::gifti ALIAS giftiio_static )

#








# target_include_directories( giftiio PUBLIC
# 			    "${gifticlib_SOURCE_DIR}/include"
# 			    ${NIFTI_INCLUDE_DIR} )


# # binaries
# INSTALL(TARGETS giftiio giftiio_static gifti_tool gifti_test
#     RUNTIME DESTINATION ${GIFTI_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
#     LIBRARY DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
#     ARCHIVE DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT Development)

# # headers
# INSTALL(FILES gifti_io.h gifti_xml.h
#     DESTINATION ${GIFTI_INSTALL_INCLUDE_DIR}
#     COMPONENT Development)

